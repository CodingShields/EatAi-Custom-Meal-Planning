<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" style="margin: auto; background: none; display: block; shape-rendering: auto; animation-play-state: running; animation-delay: 0s;" width="484" height="250" preserveAspectRatio="xMidYMid"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script>
<style type="text/css" style="animation-play-state: running; animation-delay: 0s;">
  text {
    text-anchor: middle; font-size: 80px; opacity: 0;
  }
</style>
<g style="transform-origin: 242px 125px; transform: scale(1); animation-play-state: running; animation-delay: 0s;">
<g transform="translate(242,125)" style="animation-play-state: running; animation-delay: 0s;">
  <g transform="translate(0,0)" style="animation-play-state: running; animation-delay: 0s;"><g class="path" style="opacity: 1; transform-origin: -156.4px -8.72128px; animation: 1.92308s linear -1.14231s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M32.64 1.12L32.64 1.12Q17.52 1.12 9.32-6.56L9.32-6.56L9.32-6.56Q1.12-14.24 1.12-31.12L1.12-31.12L1.12-31.12Q1.12-63.36 32.48-63.36L32.48-63.36L32.48-63.36Q40.08-63.36 46.60-61.52L46.60-61.52L46.60-61.52Q53.12-59.68 56.32-57.44L56.32-57.44L56.32-37.44L37.12-37.44L37.12-43.20L37.12-43.20Q37.12-46.24 35.76-47.68L35.76-47.68L35.76-47.68Q34.40-49.12 31.68-49.12L31.68-49.12L31.68-49.12Q28.96-49.12 27.60-47.68L27.60-47.68L27.60-47.68Q26.24-46.24 26.24-43.20L26.24-43.20L26.24-19.04L26.24-19.04Q26.24-16 27.60-14.56L27.60-14.56L27.60-14.56Q28.96-13.12 31.68-13.12L31.68-13.12L31.68-13.12Q34.40-13.12 35.76-14.56L35.76-14.56L35.76-14.56Q37.12-16 37.12-19.04L37.12-19.04L37.12-25.52L56.32-25.52L56.32-4.80L56.32-4.80Q53.04-2.56 46.60-0.72L46.60-0.72L46.60-0.72Q40.16 1.12 32.64 1.12L32.64 1.12" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(234, 76, 137); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: -102.08px 0.15872px; animation: 1.92308s linear -1.01538s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M83.04 1.12L83.04 1.12Q71.68 1.12 65.28-4.84L65.28-4.84L65.28-4.84Q58.88-10.80 58.88-22.24L58.88-22.24L58.88-22.24Q58.88-33.68 65.28-39.64L65.28-39.64L65.28-39.64Q71.68-45.60 83.04-45.60L83.04-45.60L83.04-45.60Q94.56-45.60 100.88-39.56L100.88-39.56L100.88-39.56Q107.20-33.52 107.20-22.24L107.20-22.24L107.20-22.24Q107.20-10.80 100.80-4.84L100.80-4.84L100.80-4.84Q94.40 1.12 83.04 1.12L83.04 1.12zM83.04-13.12L83.04-13.12Q85.36-13.12 86.52-14.36L86.52-14.36L86.52-14.36Q87.68-15.60 87.68-18.24L87.68-18.24L87.68-26.24L87.68-26.24Q87.68-28.88 86.52-30.12L86.52-30.12L86.52-30.12Q85.36-31.36 83.04-31.36L83.04-31.36L83.04-31.36Q80.72-31.36 79.56-30.12L79.56-30.12L79.56-30.12Q78.40-28.88 78.40-26.24L78.40-26.24L78.40-18.24L78.40-18.24Q78.40-15.60 79.56-14.36L79.56-14.36L79.56-14.36Q80.72-13.12 83.04-13.12L83.04-13.12" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(195, 35, 97); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: -51.52px 0.15872px; animation: 1.92308s linear -0.888462s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M133.60 1.12L133.60 1.12Q122.24 1.12 115.84-4.84L115.84-4.84L115.84-4.84Q109.44-10.80 109.44-22.24L109.44-22.24L109.44-22.24Q109.44-33.68 115.84-39.64L115.84-39.64L115.84-39.64Q122.24-45.60 133.60-45.60L133.60-45.60L133.60-45.60Q145.12-45.60 151.44-39.56L151.44-39.56L151.44-39.56Q157.76-33.52 157.76-22.24L157.76-22.24L157.76-22.24Q157.76-10.80 151.36-4.84L151.36-4.84L151.36-4.84Q144.96 1.12 133.60 1.12L133.60 1.12zM133.60-13.12L133.60-13.12Q135.92-13.12 137.08-14.36L137.08-14.36L137.08-14.36Q138.24-15.60 138.24-18.24L138.24-18.24L138.24-26.24L138.24-26.24Q138.24-28.88 137.08-30.12L137.08-30.12L137.08-30.12Q135.92-31.36 133.60-31.36L133.60-31.36L133.60-31.36Q131.28-31.36 130.12-30.12L130.12-30.12L130.12-30.12Q128.96-28.88 128.96-26.24L128.96-26.24L128.96-18.24L128.96-18.24Q128.96-15.60 130.12-14.36L130.12-14.36L130.12-14.36Q131.28-13.12 133.60-13.12L133.60-13.12" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(234, 76, 137); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: 1.04001px -8.72128px; animation: 1.92308s linear -0.761538s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M200.88-23.76L208.56-13.12L212-13.12L212 0L192.40 0L184.16-15.36L182.24-15.36L182.24 0L160.32 0L160.32-13.12L163.84-13.12L163.84-49.12L160.32-49.12L160.32-62.24L182.24-62.24L182.24-29.76L184.16-29.76L194.08-44.48L210.96-44.48L210.96-31.36L207.68-31.36L200.88-23.76" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(195, 35, 97); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: 41.44px -33.1613px; animation: 1.92308s linear -0.634615s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M234.72-48.88L218.40-48.88L218.40-62.24L234.72-62.24L234.72-48.88" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(234, 76, 137); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: 42.16px 0.15872px; animation: 1.92308s linear -0.507692s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M240 0L214.56 0L214.56-13.12L218.08-13.12L218.08-31.36L214.56-31.36L214.56-44.48L236.48-44.48L236.48-13.12L240-13.12L240 0" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(195, 35, 97); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: 83.68px -0.401279px; animation: 1.92308s linear -0.380769s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M291.84-13.12L295.36-13.12L295.36 0L270.08 0L270.08-13.12L273.44-13.12L273.44-26.24L273.44-26.24Q273.44-28.88 272.32-30.12L272.32-30.12L272.32-30.12Q271.20-31.36 268.96-31.36L268.96-31.36L268.96-31.36Q264.16-31.36 264.16-26.24L264.16-26.24L264.16-13.12L267.52-13.12L267.52 0L242.24 0L242.24-13.12L245.76-13.12L245.76-31.36L242.24-31.36L242.24-44.48L264.16-44.48L264.16-38.24L264.16-38.24Q269.92-45.60 278.56-45.60L278.56-45.60L278.56-45.60Q285.20-45.60 288.52-41.44L288.52-41.44L288.52-41.44Q291.84-37.28 291.84-30L291.84-30L291.84-13.12" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(234, 76, 137); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: 137.52px 9.03872px; animation: 1.92308s linear -0.253846s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M321.36 18.88L321.36 18.88Q315.60 18.88 310.36 18.08L310.36 18.08L310.36 18.08Q305.12 17.28 302.24 16.24L302.24 16.24L302.24 3.12L302.24 3.12Q310.72 4.64 317.44 4.64L317.44 4.64L317.44 4.64Q322 4.64 324.04 3.24L324.04 3.24L324.04 3.24Q326.08 1.84 326.08-2L326.08-2L326.08-5.44L326.08-5.44Q324.08-2.88 320.92-0.88L320.92-0.88L320.92-0.88Q317.76 1.12 313.68 1.12L313.68 1.12L313.68 1.12Q305.52 1.12 301.40-4.96L301.40-4.96L301.40-4.96Q297.28-11.04 297.28-22.24L297.28-22.24L297.28-22.24Q297.28-33.44 301.40-39.52L301.40-39.52L301.40-39.52Q305.52-45.60 313.68-45.60L313.68-45.60L313.68-45.60Q317.76-45.60 320.92-43.60L320.92-43.60L320.92-43.60Q324.08-41.60 326.08-39.04L326.08-39.04L326.08-44.48L348-44.48L348-31.36L344.48-31.36L344.48-3.20L344.48-3.20Q344.48 8.40 338.72 13.64L338.72 13.64L338.72 13.64Q332.96 18.88 321.36 18.88L321.36 18.88zM321.44-13.12L321.44-13.12Q323.76-13.12 324.92-14.36L324.92-14.36L324.92-14.36Q326.08-15.60 326.08-18.24L326.08-18.24L326.08-26.24L326.08-26.24Q326.08-28.88 324.92-30.12L324.92-30.12L324.92-30.12Q323.76-31.36 321.44-31.36L321.44-31.36L321.44-31.36Q319.12-31.36 317.96-30.12L317.96-30.12L317.96-30.12Q316.80-28.88 316.80-26.24L316.80-26.24L316.80-18.24L316.80-18.24Q316.80-15.60 317.96-14.36L317.96-14.36L317.96-14.36Q319.12-13.12 321.44-13.12L321.44-13.12" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(195, 35, 97); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: 177.24px -17.4813px; animation: 1.92308s linear -0.126923s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M370.56-17.52L354.08-17.52L350.40-58.24L350.40-62.24L374.32-62.24L374.32-58.24L370.56-17.52" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(234, 76, 137); animation-play-state: running; animation-delay: 0s;"/></g><g class="path" style="opacity: 1; transform-origin: 177.2px 15.8387px; animation: 1.92308s linear 0s infinite normal forwards running fade-0ae2310c-001f-4b07-be5b-238a9cac97d0;"><path d="M371.36 0L353.28 0L353.28-13.12L371.36-13.12L371.36 0" fill="#ea4c89" stroke="none" stroke-width="none" transform="translate(-185.1199951171875,22.398720092773438)" style="fill: rgb(195, 35, 97); animation-play-state: running; animation-delay: 0s;"/></g></g>
</g>
</g>
<style id="fade-0ae2310c-001f-4b07-be5b-238a9cac97d0" data-anikit="">@keyframes fade-0ae2310c-001f-4b07-be5b-238a9cac97d0
{
  0% {
    animation-timing-function: cubic-bezier(0.2057,0.573,0.3723,0.9184);
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}</style></svg>